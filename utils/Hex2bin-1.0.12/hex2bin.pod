HEX2BIN 1 "2014 november 25th" "Hex2bin Version 1.0.12"
=head1 NAME

hex2bin/mot2bin  \- converts Intel/Motorola  hex files into binary

=head1 SYNOPSIS

hex2bin [-c] [-e extension] [-f address [value]] [-k checksum type] [-l length] [-m minimum block size] [-p pad byte] [-r start end] [-s address] [-w] file

=head1 DESCRIPTION

B<Hex2bin>
is a program that converts an Intel hex format into binary.
It can handle the extended Intel hex format. Both the segmented
and linear address records are supported.
Records need not be sorted and there can be gaps between records.
Records are assumed to be non-overlapping.
Padding bytes may be specified and a checksum may be inserted in the
binary file.

B<Mot2bin>
does the same with Motorola hex files. It has the same features and command line
options. 24 bit and 32 bit records are supported.

=head1 OPTIONS

Options can be specified in any order, with the file name at the end.

B<-c>

Enables checksum verification.

By default, it ignores checksum errors in the hex file, so that someone can change
by hand some bytes with a text editor, allowing quick fixes without recompiling a source
code all over again. This is useful when tweaking constants directly in the code or
something similar. If you want checksum error reporting, specify the option -c.

B<Ex.: hex2bin -c example.hex>

If there is a checksum error somewhere, the program will continue the
conversion anyway.

B<-e [extension]>

By default, the output file will have an extension B<filename.bin>.
Another extension may be specified with this command:

B<Ex.: hex2bin -e com example.hex>

The output file will be example.com

B<-f [address] [value]>

Address and value of checksum to insert (force) in the binary file

B<-k [0|1|2]>

In many cases, someone needs to insert a checksum in the binary file. For example,
a boot rom is programmed with a checksum which is verified at power-up. This checksum
is not the same as the one above for the hex file. This feature uses also options
B<-r> and B<-f> described below.

Select the checksum type to insert into the binary file
  0 : 8-bit
  1 : 16-bit little endian
  2 : 16-bit big endian

B<-l [length]>

The binary file will be padded with FF or pad bytes as specified by the option below, up
to a maximal Length (Starting address + Length -1 is Max Address)

B<-m [minimum block size]>

File Size Dimension will be a multiple of Minimum block size.
File will be filled with Pattern.
Length must be a power of 2 in hexadecimal [see B<-l> option]
Attention this option is STRONGER than Maximal Length

B<-p [pad_byte]>

Pads unused locations with the specified byte.

By default, this byte is FF, which is the unprogrammed value for most EPROM/EEPROM/Flash.

B<Ex.: hex2bin -p 3E example.hex>

B<-r [start] [end]>

Range to compute binary checksum over (default is min and max addresses)

B<-s [address]>

Normally, hex2bin will generate a binary file starting at the lowest address in the hex file.
If the lowest address isn't 0000, ex: 0100, the first byte that should be at 0100
will be stored at address 0000 in the binary file. This may cause problems when using the
binary file to program an EPROM.
If you can't specify the starting address (or offset) to your EPROM programmer, you can specify
a starting address on the command line:

B<Ex.: hex2bin -s 0000 start_at_0100.hex>

The bytes will be stored in the binary file with a padding from 0000 to the
lowest addess (00FF in this case). Padding bytes are all FF by default so an EPROM
programmer can skip these bytes when programming. The padding value can be changed
with the -p option.

B<-w>

Swap wordwise (low <-> high). Used by Microchip's MPLAB IDE

=head1 NOTES

This program does minimal error checking since many hex files are
generated by known good assemblers.

=head1 AUTHOR
Jacques Pelletier (jpelletier@ieee.org) - version 1.0.12
